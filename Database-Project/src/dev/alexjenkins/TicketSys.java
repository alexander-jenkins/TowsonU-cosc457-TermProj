/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dev.alexjenkins;

import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jenki
 */
public class TicketSys extends javax.swing.JFrame {

    /**
     * Creates new form TicketSys
     */
    public TicketSys() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        homepage = new javax.swing.JPanel();
        homeCreateButton = new javax.swing.JButton();
        welcomeBanner = new javax.swing.JLabel();
        viewTicketsButton = new javax.swing.JButton();
        searchTicketButton = new javax.swing.JButton();
        createPage = new javax.swing.JPanel();
        createTicketHeader = new javax.swing.JLabel();
        clientIdField = new javax.swing.JTextField();
        clientIdLabel = new javax.swing.JLabel();
        statusSelector = new javax.swing.JComboBox<>();
        statusLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        requestDetailPane = new javax.swing.JScrollPane();
        requestDetail = new javax.swing.JTextArea();
        createButton = new javax.swing.JButton();
        emplIdLabel = new javax.swing.JLabel();
        emplIdField = new javax.swing.JTextField();
        createHomeButton = new javax.swing.JButton();
        searchPage = new javax.swing.JPanel();
        searchBanner = new javax.swing.JLabel();
        ticketNumInputLabel = new javax.swing.JLabel();
        searchValue = new javax.swing.JTextField();
        searchSubmitBtn = new javax.swing.JButton();
        searchHomeButton = new javax.swing.JButton();
        viewTickets = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewTicketsTable = new javax.swing.JTable();
        viewTableRefreshButton = new javax.swing.JButton();
        viewTicketsHomeButton = new javax.swing.JButton();
        editPage = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dynamicClientLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dynamicTicketNum = new javax.swing.JLabel();
        dynamicCreatedLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        dynamicCreatedByLabel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        dynamicRequestLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        editNotesTable = new javax.swing.JTable();
        noteInputField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        dynamicStatusBox = new javax.swing.JComboBox<>();
        editSaveStatus = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        editHomeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);

        mainPanel.setMaximumSize(new java.awt.Dimension(1280, 720));
        mainPanel.setPreferredSize(new java.awt.Dimension(1280, 720));
        mainPanel.setLayout(new java.awt.CardLayout());

        homeCreateButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        homeCreateButton.setText("Create a Ticket");
        homeCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeCreateButtonActionPerformed(evt);
            }
        });

        welcomeBanner.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        welcomeBanner.setText("Welcome to TicketSys");

        viewTicketsButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        viewTicketsButton.setText("View Tickets");
        viewTicketsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTicketsButtonActionPerformed(evt);
            }
        });

        searchTicketButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        searchTicketButton.setText("Search Ticket");
        searchTicketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTicketButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout homepageLayout = new javax.swing.GroupLayout(homepage);
        homepage.setLayout(homepageLayout);
        homepageLayout.setHorizontalGroup(
            homepageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homepageLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(homepageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(welcomeBanner)
                    .addGroup(homepageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(searchTicketButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewTicketsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(homeCreateButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(718, Short.MAX_VALUE))
        );
        homepageLayout.setVerticalGroup(
            homepageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homepageLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(welcomeBanner)
                .addGap(70, 70, 70)
                .addComponent(homeCreateButton)
                .addGap(18, 18, 18)
                .addComponent(viewTicketsButton)
                .addGap(18, 18, 18)
                .addComponent(searchTicketButton)
                .addContainerGap(336, Short.MAX_VALUE))
        );

        mainPanel.add(homepage, "card3");

        createPage.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        createPage.setPreferredSize(new java.awt.Dimension(1280, 720));
        createPage.setRequestFocusEnabled(false);

        createTicketHeader.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        createTicketHeader.setText("Create a Ticket");
        createTicketHeader.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        clientIdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientIdFieldActionPerformed(evt);
            }
        });

        clientIdLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        clientIdLabel.setText("Client ID:");

        statusSelector.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        statusSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Open", "Pending", "Resolved" }));
        statusSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusSelectorActionPerformed(evt);
            }
        });

        statusLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        statusLabel.setText("Ticket Status:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Request Detail:");

        requestDetail.setColumns(20);
        requestDetail.setRows(5);
        requestDetailPane.setViewportView(requestDetail);

        createButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        createButton.setText("Create Ticket");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        emplIdLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        emplIdLabel.setText("Empl ID:");

        emplIdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emplIdFieldActionPerformed(evt);
            }
        });

        createHomeButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        createHomeButton.setText("Home");
        createHomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createHomeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout createPageLayout = new javax.swing.GroupLayout(createPage);
        createPage.setLayout(createPageLayout);
        createPageLayout.setHorizontalGroup(
            createPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPageLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(createPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createPageLayout.createSequentialGroup()
                        .addGroup(createPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(createPageLayout.createSequentialGroup()
                                .addComponent(clientIdLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clientIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(createTicketHeader))
                        .addGap(238, 995, Short.MAX_VALUE))
                    .addGroup(createPageLayout.createSequentialGroup()
                        .addGroup(createPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(createHomeButton)
                            .addComponent(createButton)
                            .addComponent(requestDetailPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addGroup(createPageLayout.createSequentialGroup()
                                .addComponent(statusLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statusSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(createPageLayout.createSequentialGroup()
                                .addComponent(emplIdLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(emplIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        createPageLayout.setVerticalGroup(
            createPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPageLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(createTicketHeader)
                .addGap(40, 40, 40)
                .addGroup(createPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientIdLabel)
                    .addGroup(createPageLayout.createSequentialGroup()
                        .addComponent(clientIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addGap(18, 18, 18)
                .addGroup(createPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emplIdLabel)
                    .addComponent(emplIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(requestDetailPane, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(createPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(statusSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(createButton)
                .addGap(100, 100, 100)
                .addComponent(createHomeButton)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        mainPanel.add(createPage, "card2");

        searchBanner.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        searchBanner.setText("Search");

        ticketNumInputLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ticketNumInputLabel.setText("Ticket Number:");

        searchSubmitBtn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        searchSubmitBtn.setText("Submit");
        searchSubmitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSubmitBtnActionPerformed(evt);
            }
        });

        searchHomeButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        searchHomeButton.setText("Home");
        searchHomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchHomeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPageLayout = new javax.swing.GroupLayout(searchPage);
        searchPage.setLayout(searchPageLayout);
        searchPageLayout.setHorizontalGroup(
            searchPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPageLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(searchPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchHomeButton)
                    .addComponent(searchSubmitBtn)
                    .addGroup(searchPageLayout.createSequentialGroup()
                        .addComponent(ticketNumInputLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchBanner))
                .addContainerGap(952, Short.MAX_VALUE))
        );
        searchPageLayout.setVerticalGroup(
            searchPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPageLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(searchBanner)
                .addGap(18, 18, 18)
                .addGroup(searchPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ticketNumInputLabel)
                    .addComponent(searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchSubmitBtn)
                .addGap(100, 100, 100)
                .addComponent(searchHomeButton)
                .addContainerGap(354, Short.MAX_VALUE))
        );

        mainPanel.add(searchPage, "card4");

        viewTicketsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Ticket Number", "Client ID", "Creator ID", "Request Detail", "Status", "Date Created"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewTicketsTable);

        viewTableRefreshButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        viewTableRefreshButton.setText("Refresh Table");
        viewTableRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTableRefreshButtonActionPerformed(evt);
            }
        });

        viewTicketsHomeButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        viewTicketsHomeButton.setText("Home");
        viewTicketsHomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTicketsHomeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewTicketsLayout = new javax.swing.GroupLayout(viewTickets);
        viewTickets.setLayout(viewTicketsLayout);
        viewTicketsLayout.setHorizontalGroup(
            viewTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewTicketsLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(viewTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewTicketsHomeButton)
                    .addComponent(viewTableRefreshButton)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1080, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        viewTicketsLayout.setVerticalGroup(
            viewTicketsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewTicketsLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(viewTableRefreshButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(viewTicketsHomeButton)
                .addContainerGap(84, Short.MAX_VALUE))
        );

        mainPanel.add(viewTickets, "card5");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Ticket Number:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Date Created:");

        dynamicClientLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        dynamicClientLabel.setText("jLabel5");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Client:");

        dynamicTicketNum.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        dynamicTicketNum.setText("jLabel7");

        dynamicCreatedLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        dynamicCreatedLabel.setText("jLabel8");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Created By:");

        dynamicCreatedByLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        dynamicCreatedByLabel.setText("jLabel9");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("Request:");

        dynamicRequestLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        dynamicRequestLabel.setText("jLabel11");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel12.setText("Notes:");

        editNotesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Created By", "Date Created", "Note"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(editNotesTable);

        noteInputField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton1.setText("Add Note");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        dynamicStatusBox.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        dynamicStatusBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Open", "Pending", "Resolved" }));
        dynamicStatusBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dynamicStatusBoxActionPerformed(evt);
            }
        });

        editSaveStatus.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        editSaveStatus.setText("Save Status");
        editSaveStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSaveStatusActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 0, 0));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editHomeButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        editHomeButton.setText("Back");
        editHomeButton.setToolTipText("");
        editHomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editHomeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editPageLayout = new javax.swing.GroupLayout(editPage);
        editPage.setLayout(editPageLayout);
        editPageLayout.setHorizontalGroup(
            editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPageLayout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel12)
                        .addGroup(editPageLayout.createSequentialGroup()
                            .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel6)
                                .addComponent(jLabel3)
                                .addComponent(jLabel1)
                                .addComponent(jLabel10))
                            .addGap(25, 25, 25)
                            .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dynamicRequestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(dynamicCreatedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dynamicClientLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dynamicTicketNum, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(dynamicCreatedByLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(editPageLayout.createSequentialGroup()
                            .addComponent(noteInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(editPageLayout.createSequentialGroup()
                        .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dynamicStatusBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editHomeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editSaveStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(437, Short.MAX_VALUE))
        );
        editPageLayout.setVerticalGroup(
            editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPageLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dynamicTicketNum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(dynamicClientLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dynamicCreatedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(dynamicCreatedByLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(dynamicRequestLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(noteInputField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dynamicStatusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editSaveStatus))
                .addGap(75, 75, 75)
                .addGroup(editPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(editHomeButton))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        mainPanel.add(editPage, "card6");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void clientIdFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientIdFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientIdFieldActionPerformed

    private void statusSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusSelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusSelectorActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // TODO maybe add error handling!
        
        // store the info and clear the fields
        int clientId = Integer.parseInt(clientIdField.getText());
        clientIdField.setText(null);
        int creatorId = Integer.parseInt(emplIdField.getText());
        emplIdField.setText(null);
        String request = requestDetail.getText();
        requestDetail.setText(null);
        String status = String.valueOf(statusSelector.getSelectedItem());
        statusSelector.setSelectedIndex(0);
        
        // gather date
        LocalDate dateObj = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyy-MM-dd");
        String createDate = dateObj.format(formatter);
        
        // gather time
        LocalDateTime timeObj = LocalDateTime.now();
        formatter = DateTimeFormatter.ofPattern("hh:mm:ss");
        String createTime = timeObj.format(formatter);
        
        // set up database
        // check if jdbc exists
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e);
        }
        
        // creds for database
        final String id = "ajenki21";
        final String pw = "COSC*l270l";
        
        // for local computer only
        final String server = "jdbc:mysql://localhost:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        // use for submissions
        // final String server = "jdbc:mysql://triton.towson.edu:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        // connect to databse     
        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement statement = con.createStatement();
            
            // create the instert statement
            String insert = String.format("INSERT into ajenki21db.ticket (client, createdBy, createDate, createTime, status, request) "
                    + "values (%d, %d, '%s', '%s', '%s', '%s')", clientId, creatorId, createDate, createTime, status, request);
            
            // execute statement
            statement.executeUpdate(insert);
        }         
        catch (SQLException ex) {
            System.err.println(ex);
        }
        
        
        // output values
        System.out.printf("Created Ticket:%nCID: %d%nCreated By: %s%nRequest: %s%nStatus: %s%nDate: %s%nTime: %s%n", clientId, creatorId, request, status, createDate, createTime);
    }//GEN-LAST:event_createButtonActionPerformed

    private void emplIdFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emplIdFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emplIdFieldActionPerformed

    private void createHomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createHomeButtonActionPerformed
        mainPanel.removeAll();
        mainPanel.add(homepage);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_createHomeButtonActionPerformed

    private void homeCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeCreateButtonActionPerformed
        mainPanel.removeAll();
        mainPanel.add(createPage);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_homeCreateButtonActionPerformed

    private void viewTableRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTableRefreshButtonActionPerformed
        // TODO add your handling code here:
        
        // set up database
        // check if jdbc exists
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e);
        }
        
        // creds for database
        final String id = "ajenki21";
        final String pw = "COSC*l270l";
        
        // for local computer only
        final String server = "jdbc:mysql://localhost:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        // use for submissions
        // final String server = "jdbc:mysql://triton.towson.edu:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        // connect to databse     
        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement statement = con.createStatement();
            
            // fetch the tickets 
            ResultSet rs = statement.executeQuery("select * from ajenki21db.ticket");
            
            // populate the model
            DefaultTableModel model = new DefaultTableModel(new String[]{"Ticket Number", "Client ID", "Creator ID", "Request", "Status", "Date Created"}, 0);
            while (rs.next()) {
                String a = rs.getString("ticketNum");
                String b = rs.getString("client");
                String c = rs.getString("createdBy");
                String d = rs.getString("request");
                String e = rs.getString("status");
                String date = rs.getString("createDate");
                String time = rs.getString("createTime");
                String dt = date + " " + time;
                model.addRow(new Object[]{a, b, c, d, e, dt});
            }
            
            // apply model
            viewTicketsTable.setModel(model);
        }         
        catch (SQLException ex) {
            System.err.println(ex);
        }
    }//GEN-LAST:event_viewTableRefreshButtonActionPerformed

    private void viewTicketsHomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTicketsHomeButtonActionPerformed
        mainPanel.removeAll();
        mainPanel.add(homepage);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_viewTicketsHomeButtonActionPerformed

    private void viewTicketsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTicketsButtonActionPerformed
        mainPanel.removeAll();
        mainPanel.add(viewTickets);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_viewTicketsButtonActionPerformed

    private void searchHomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchHomeButtonActionPerformed
        mainPanel.removeAll();
        mainPanel.add(homepage);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_searchHomeButtonActionPerformed

    private void searchTicketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTicketButtonActionPerformed
        mainPanel.removeAll();
        mainPanel.add(searchPage);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_searchTicketButtonActionPerformed

    private void editHomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editHomeButtonActionPerformed
        mainPanel.removeAll();
        mainPanel.add(searchPage);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_editHomeButtonActionPerformed

    private void searchSubmitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSubmitBtnActionPerformed
        mainPanel.removeAll();
        mainPanel.add(editPage);
        mainPanel.repaint();
        mainPanel.revalidate();
        
        // gather info for update of the edit page
        String searchVal = searchValue.getText();
        searchValue.setText(null);
       
        // connect to database and retrieve info
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e);
        }
        
        // creds for database
        final String id = "ajenki21";
        final String pw = "COSC*l270l";
        
        // for local computer only
        final String server = "jdbc:mysql://localhost:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        // use for submissions
        // final String server = "jdbc:mysql://triton.towson.edu:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement statement = con.createStatement();
            
            // fetch the tickets 
            ResultSet rs = statement.executeQuery("select * from ajenki21db.note where ticketID = " + searchVal);
            
            // populate the model
            DefaultTableModel model = new DefaultTableModel(new String[]{"Created By", "Date Created", "Note"}, 0);
            while (rs.next()) {
                String a = rs.getString("createdBy");
                String b = rs.getString("message");
                String date = rs.getString("createDate");
                String time = rs.getString("createTime");
                String dt = date + " " + time;
                model.addRow(new Object[]{a, dt, b});
            }
            
            // apply model
            editNotesTable.setModel(model);
            
            
        }         
        catch (SQLException ex) {
            System.err.println(ex);
        }
        
        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement statement = con.createStatement();
            
            // fetch the tickets 
            ResultSet rs = statement.executeQuery("select * from ajenki21db.ticket where ticketNum = " + searchVal);
            while (rs.next()) {
                dynamicTicketNum.setText(rs.getString("ticketNum"));
                dynamicClientLabel.setText(rs.getString("client"));
                dynamicCreatedByLabel.setText(rs.getString("createdBy"));
                String date = rs.getString("createDate");
                String time = rs.getString("createTime");
                dynamicCreatedLabel.setText(date + " " + time);
                dynamicRequestLabel.setText(rs.getString("request"));
                dynamicStatusBox.setSelectedItem(rs.getString("status"));
            }
        }         
        catch (SQLException ex) {
            System.err.println(ex);
        }
        
    }//GEN-LAST:event_searchSubmitBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // gather required info
        String message = noteInputField.getText();
        String ticket = dynamicTicketNum.getText();
        String createdBy = dynamicCreatedByLabel.getText();
        
        // gather date
        LocalDate dateObj = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyy-MM-dd");
        String createDate = dateObj.format(formatter);
        
        // gather time
        LocalDateTime timeObj = LocalDateTime.now();
        formatter = DateTimeFormatter.ofPattern("hh:mm:ss");
        String createTime = timeObj.format(formatter);
        
        // set up database
        // check if jdbc exists
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e);
        }
        
        // creds for database
        final String id = "ajenki21";
        final String pw = "COSC*l270l";
        
        // for local computer only
        final String server = "jdbc:mysql://localhost:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        // use for submissions
        // final String server = "jdbc:mysql://triton.towson.edu:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        // connect to databse     
        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement statement = con.createStatement();
            
            // create the instert statement
            String insert = String.format("INSERT into ajenki21db.note (ticketID, createdBy, createDate, createTime, message) "
                    + "values (%d, %d, '%s', '%s', '%s')", Integer.parseInt(ticket), Integer.parseInt(createdBy), createDate, createTime, message);
            
            // execute statement
            statement.executeUpdate(insert);
        }         
        catch (SQLException ex) {
            System.err.println(ex);
        }
        
        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement statement = con.createStatement();
            
            // fetch the tickets 
            ResultSet rs = statement.executeQuery("select * from ajenki21db.note where ticketID = " + ticket);
            
            // populate the model
            DefaultTableModel model = new DefaultTableModel(new String[]{"Created By", "Date Created", "Note"}, 0);
            while (rs.next()) {
                String a = rs.getString("createdBy");
                String b = rs.getString("message");
                String date = rs.getString("createDate");
                String time = rs.getString("createTime");
                String dt = date + " " + time;
                model.addRow(new Object[]{a, dt, b});
            }
            
            // apply model
            editNotesTable.setModel(model);
            
            
        }         
        catch (SQLException ex) {
            System.err.println(ex);
        }
        
        noteInputField.setText(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void dynamicStatusBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dynamicStatusBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dynamicStatusBoxActionPerformed

    private void editSaveStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSaveStatusActionPerformed
        // get new info
        String ticket = dynamicTicketNum.getText();
        String newStatus = String.valueOf(dynamicStatusBox.getSelectedItem());
        
        // set up database
        // check if jdbc exists
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e);
        }
        
        // creds for database
        final String id = "ajenki21";
        final String pw = "COSC*l270l";
        
        // for local computer only
        final String server = "jdbc:mysql://localhost:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        // use for submissions
        // final String server = "jdbc:mysql://triton.towson.edu:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        // connect to databse     
        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement statement = con.createStatement();
            
            // create the instert statement
            String update = String.format("update ajenki21db.ticket set status = '" + newStatus + "' where ticketNum = " + ticket);
            
            // execute statement
            statement.executeUpdate(update);
        }         
        catch (SQLException ex) {
            System.err.println(ex);
        }
    }//GEN-LAST:event_editSaveStatusActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        mainPanel.removeAll();
        mainPanel.add(viewTickets);
        mainPanel.repaint();
        mainPanel.revalidate();
        
        // connect to database and retrieve info
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e);
        }
        
        // creds for database
        final String id = "ajenki21";
        final String pw = "COSC*l270l";
        
        // for local computer only
        final String server = "jdbc:mysql://localhost:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        // use for submissions
        // final String server = "jdbc:mysql://triton.towson.edu:3360/?serverTimezone=EST#/ajenki21db?useSSL=false";
        
        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement statement = con.createStatement();
            
            // delete ticket
            statement.executeUpdate("delete from ajenki21db.ticket where ticketNum = " + dynamicTicketNum.getText());
        }         
        catch (SQLException ex) {
            System.err.println(ex);
        }
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicketSys.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicketSys.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicketSys.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicketSys.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicketSys().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField clientIdField;
    private javax.swing.JLabel clientIdLabel;
    private javax.swing.JButton createButton;
    private javax.swing.JButton createHomeButton;
    private javax.swing.JPanel createPage;
    private javax.swing.JLabel createTicketHeader;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel dynamicClientLabel;
    private javax.swing.JLabel dynamicCreatedByLabel;
    private javax.swing.JLabel dynamicCreatedLabel;
    private javax.swing.JLabel dynamicRequestLabel;
    private javax.swing.JComboBox<String> dynamicStatusBox;
    private javax.swing.JLabel dynamicTicketNum;
    private javax.swing.JButton editHomeButton;
    private javax.swing.JTable editNotesTable;
    private javax.swing.JPanel editPage;
    private javax.swing.JButton editSaveStatus;
    private javax.swing.JTextField emplIdField;
    private javax.swing.JLabel emplIdLabel;
    private javax.swing.JButton homeCreateButton;
    private javax.swing.JPanel homepage;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField noteInputField;
    private javax.swing.JTextArea requestDetail;
    private javax.swing.JScrollPane requestDetailPane;
    private javax.swing.JLabel searchBanner;
    private javax.swing.JButton searchHomeButton;
    private javax.swing.JPanel searchPage;
    private javax.swing.JButton searchSubmitBtn;
    private javax.swing.JButton searchTicketButton;
    private javax.swing.JTextField searchValue;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JComboBox<String> statusSelector;
    private javax.swing.JLabel ticketNumInputLabel;
    private javax.swing.JButton viewTableRefreshButton;
    private javax.swing.JPanel viewTickets;
    private javax.swing.JButton viewTicketsButton;
    private javax.swing.JButton viewTicketsHomeButton;
    private javax.swing.JTable viewTicketsTable;
    private javax.swing.JLabel welcomeBanner;
    // End of variables declaration//GEN-END:variables
}
